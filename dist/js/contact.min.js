"use strict";var user={name:"Jon"},sayHello=function(){console.log("Hello from contact.js")},getFullName=function(e,o){return"My fullname is ".concat(e," ").concat(o)};module.exports=sayHello,module.exports=getFullName;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
